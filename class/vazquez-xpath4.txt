1)Write an XPath to find all the @characters attributes on the <cbml:panel> elements and take distinct-values(). Inspect the results. Is this really removing all the duplicates? (Notice how the values are coded.) "'distinct-values(//cbml:panel/@characters)' does not appear to remove duplicates"



2)Let's try the tokenize function to isolate each value. This is one of the "string functions" that needs to look inside each node one at a time, and it needs to be constructed carefully to indicate what it is working on. Tokenize is designed to split values on (by default) spaces, and create a sequence out of them. Let's try it here. Step-by-step:

*To write this, you have to tell tokenize(.) to process just one thing, and usually it's the self node that you navigate to. In this case, that's each @characters attribute.

*Take your expression from 1. Remove distinct-values().

*At the end of the expression you can use the simple map ! operator to say, work on these nodes one at a time.

*Then add the tokenize(.) function with a dot inside like that. The dot indicates that you're working on the self axis.

*(Unlike the name() function, the string functions like tokenize(.) require the dot notation or a specific node inside the parentheses to process)

*Take a look at your results. THEN, alter your XPath to return the distinct-values. Record the expression. (Better, yes?)
"'distinct-values(//cbml:panel/@characters ! tokenize(.))' the function at first returned every instance of a character attribute but after using distinct values, returned a list of the 23 names used everywhere"



3)Let's try out the contains() function. This handy function lets you test nodes to see whether they contain a literal string of characters.

*Look at how contains() is written in The XPath Functions we Use the Most. This function is the first one we've looked at together that takes two arguments.

*I think of this as like "finding a needle in a haystack": Indicate the one place you're searching in position 1, and the 'string-you're-searching-for' in position 2: contains(haystack, needle)

*Usually we put contains() in a predicate filter. You can use the dot . to indicate that you want to search here in a particular node for the string. OR you can step to an element, and write in the attribute you want to check inside the first position of contains()

3a)Armed with this information, use the contains() function to try finding all the panels that contain "drkelly" in the @characters value. Record your expression. How many do you find? "'//cbml:panel[@characters !contains(., 'drkelly')]' returns 5 results"

3b)Try one other application of contains(), or its cousins starts-with() or ends-with() (your choice of elements or attributes--anything you want to find out from this file), and record your expression and what you find out. "'contains(@characters="#kaliman",//cbml:panel/@characters)' also nothing found"



4)Now let's look at the string-length() function. This handy function measures one string at a time. Let's try applying it to the speech balloons in the CBML file to find out who has the longest and shortest speech in this comic.

*Step down to find all the <cbml:balloon> elements.

*Use the simple map ! operator to take each balloon one at a time, and apply string-length() to it. Record your expression.

4a)How long is the longest speech? Record an XPath expression that will give this value. Hint: Use a function we applied in XPath Ex 2. "'distinct-values(//cbml:balloon ! string-length(.))' shows a list with the biggest number being 215"

4b)Again applying what you learned from XPath Exercise 2, how will you identify the character who delivers the longest speech? Write an XPath to filter the nodes based on the
longest speech and tell you who is speaking. "'distinct-values(//cbml:balloon ! string-length(.) tokenize([215]))' is what I assume would work but its like I have to fight over which of the 2 in the end actually gets to do it's job so I end up with nothing"

4c)Okay, if you do that, change one little thing in your expression so it tells you who delivers the shortest speech in this comic.(Record your XPath expression.) What is the character saying in the shortest speech? "'distinct-values(//cbml:balloon ! string-length(.) tokenize([38]))' should work since I replaced 215 with the lowest number on the list. again, I cant answer this because nothing has been working out for me at all"



5)Halloween special! '-'

5a)Write an XPath that uses predicates and functions to tell you which <cbml:panel> in this comic book contains a <note> that contains the word "skull". Record your expression. "//cbml:panel[contains(., 'skull')]"

5b)Okay, we have one more thing to tell you about the dot . notation. Sometimes you need to filter your XPath nodes based on something about their deep descendants. When we do this, we need to use the . inside the predicate to indicate that XPath should filter based on the current context. Try these two expressions, and do your best to explain why they return different results: How is the dot notation changing the expression?

*//div[//cbml:balloon[contains(., 'NO')]]

*//div[.//cbml:balloon[contains(., 'NO')]]

(Think about this: Why does the first expression return a different number of results? What do you think the first predicate is doing?)

1 looks like it is being more broad with somthing, while 2 is including some sort of current context into the predicate so it filters based on that. but the current context is the tei root element? still confused






